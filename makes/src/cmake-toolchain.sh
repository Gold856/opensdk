#! /usr/bin/env bash

set -e

TOOLCHAIN_CMAKE_OUT=cmake-toolchain.cmake

if [ "$WPITARGET" = "Windows" ]; then
    export SUFFIX=".exe"
fi

cat << EOF > ${TOOLCHAIN_CMAKE_OUT}
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_SYSTEM_VERSION 1)

set(GCC_COMPILER_VERSION "${V_GCC}" CACHE STRING "GCC Compiler version")
set(GNU_MACHINE "${TARGET_TUPLE}" CACHE STRING "GNU compiler triple")

set(CMAKE_C_COMPILER \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-gcc${SUFFIX})
set(CMAKE_FC_COMPILER \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-gfortran${SUFFIX})
set(CMAKE_ASM_COMPILER \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-gcc${SUFFIX})
set(CMAKE_CXX_COMPILER \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-g++${SUFFIX})

set(CMAKE_AR \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-ar)
set(CMAKE_LINKER \${CMAKE_CURRENT_LIST_DIR}/bin/${TARGET_TUPLE}-ld)

set(CMAKE_FIND_ROOT_PATH "\${CMAKE_CURRENT_LIST_DIR}/\${GNU_MACHINE}/")

set(CMAKE_EXE_LINKER_FLAGS "\${CMAKE_EXE_LINKER_FLAGS} --sysroot='\${CMAKE_FIND_ROOT_PATH}'")
set(CMAKE_SHARED_LINKER_FLAGS "\${CMAKE_SHARED_LINKER_FLAGS} --sysroot='\${CMAKE_FIND_ROOT_PATH}'")
set(CMAKE_MODULE_LINKER_FLAGS "\${CMAKE_MODULE_LINKER_FLAGS} --sysroot='\${CMAKE_FIND_ROOT_PATH}'")

# Use host tools
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# Only ever build/link to sysroot
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

EOF

cat $TOOLCHAIN_CMAKE_OUT
